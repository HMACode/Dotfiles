#!/usr/bin/env bash
# This script was generated by bashly 1.1.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
hrm_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm - Hermes cli tool\n"
    echo

  else
    printf "hrm - Hermes cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm COMMAND\n"
  printf "  hrm [COMMAND] --help | -h\n"
  printf "  hrm --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Hermes configuration\n" "conf   "
  printf "  %s   Hermes logs commands\n" "logs   "
  printf "  %s   Get status of hermes server\n" "status "
  printf "  %s   Stop hermes services\n" "stop   "
  printf "  %s   Restart service\n" "restart"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "WEBLOGIC_DOMAIN_NAME (required)"
    printf "    Set the location of weblogic domain\n"
    echo

  fi
}

# :command.usage
hrm_conf_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm conf - Hermes configuration\n"
    echo

  else
    printf "hrm conf - Hermes configuration\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm conf COMMAND\n"
  printf "  hrm conf [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Show the main configuration file\n" "show"
  printf "  %s   Edit main configuration file\n" "edit"
  printf "  %s   Prints the path to the configuration folder\n" "path"
  printf "  %s   Source this command to go to the config folder\n" "cd  "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
hrm_conf_show_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm conf show - Show the main configuration file\n"
    echo

  else
    printf "hrm conf show - Show the main configuration file\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm conf show\n"
  printf "  hrm conf show --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
hrm_conf_edit_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm conf edit - Edit main configuration file\n"
    echo

  else
    printf "hrm conf edit - Edit main configuration file\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm conf edit\n"
  printf "  hrm conf edit --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
hrm_conf_path_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm conf path - Prints the path to the configuration folder\n"
    echo

  else
    printf "hrm conf path - Prints the path to the configuration folder\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm conf path\n"
  printf "  hrm conf path --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
hrm_conf_cd_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm conf cd - Source this command to go to the config folder\n"
    echo

  else
    printf "hrm conf cd - Source this command to go to the config folder\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm conf cd\n"
  printf "  hrm conf cd --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
hrm_logs_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm logs - Hermes logs commands\n"
    echo

  else
    printf "hrm logs - Hermes logs commands\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm logs COMMAND\n"
  printf "  hrm logs [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Tails the latest hermes core logs\n" "core   "
  printf "  %s   Tails the latest hermes service logs\n" "service"
  printf "  %s   Source this command to go to logs folder\n" "cd     "
  printf "  %s   Purge all log files\n" "purge  "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
hrm_logs_core_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm logs core - Tails the latest hermes core logs\n"
    echo

  else
    printf "hrm logs core - Tails the latest hermes core logs\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm logs core\n"
  printf "  hrm logs core --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
hrm_logs_service_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm logs service - Tails the latest hermes service logs\n"
    echo

  else
    printf "hrm logs service - Tails the latest hermes service logs\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm logs service\n"
  printf "  hrm logs service --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
hrm_logs_cd_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm logs cd - Source this command to go to logs folder\n"
    echo

  else
    printf "hrm logs cd - Source this command to go to logs folder\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm logs cd\n"
  printf "  hrm logs cd --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
hrm_logs_purge_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm logs purge - Purge all log files\n"
    echo

  else
    printf "hrm logs purge - Purge all log files\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm logs purge\n"
  printf "  hrm logs purge --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
hrm_status_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm status - Get status of hermes server\n"
    echo

  else
    printf "hrm status - Get status of hermes server\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm status\n"
  printf "  hrm status --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
hrm_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm stop - Stop hermes services\n"
    echo

  else
    printf "hrm stop - Stop hermes services\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm stop\n"
  printf "  hrm stop --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
hrm_restart_usage() {
  if [[ -n $long_usage ]]; then
    printf "hrm restart - Restart service\n"
    echo

  else
    printf "hrm restart - Restart service\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  hrm restart\n"
  printf "  hrm restart --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions

# :command.function
hrm_conf_show_command() {
  # src/conf_show_command.sh
  echo "# code for 'hrm restart' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
hrm_conf_edit_command() {
  # src/conf_edit_command.sh
  echo "# code for 'hrm restart' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
hrm_conf_path_command() {
  # src/conf_path_command.sh
  echo "# code for 'hrm restart' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
hrm_conf_cd_command() {
  # src/conf_cd_command.sh
  echo "# code for 'hrm restart' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
hrm_logs_core_command() {
  # src/logs_core_command.sh
  echo "# code for 'hrm restart' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
hrm_logs_service_command() {
  # src/logs_service_command.sh
  echo "# code for 'hrm restart' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
hrm_logs_cd_command() {
  # src/logs_cd_command.sh
  echo "# code for 'hrm restart' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
hrm_logs_purge_command() {
  # src/logs_purge_command.sh
  echo "# code for 'hrm restart' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
hrm_status_command() {
  # src/status_command.sh
  echo "# code for 'hrm restart' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
hrm_stop_command() {
  # src/stop_command.sh
  echo "# code for 'hrm restart' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
hrm_restart_command() {
  # src/restart_command.sh
  echo "# code for 'hrm restart' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        hrm_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  if [[ -z "${WEBLOGIC_DOMAIN_NAME:-}" ]]; then
    printf "missing required environment variable: WEBLOGIC_DOMAIN_NAME\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    conf)
      action="conf"
      shift
      hrm_conf_parse_requirements "$@"
      shift $#
      ;;

    logs)
      action="logs"
      shift
      hrm_logs_parse_requirements "$@"
      shift $#
      ;;

    status)
      action="status"
      shift
      hrm_status_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      hrm_stop_parse_requirements "$@"
      shift $#
      ;;

    restart)
      action="restart"
      shift
      hrm_restart_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      hrm_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_conf_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_conf_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    show)
      action="show"
      shift
      hrm_conf_show_parse_requirements "$@"
      shift $#
      ;;

    edit)
      action="edit"
      shift
      hrm_conf_edit_parse_requirements "$@"
      shift $#
      ;;

    path)
      action="path"
      shift
      hrm_conf_path_parse_requirements "$@"
      shift $#
      ;;

    cd)
      action="cd"
      shift
      hrm_conf_cd_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      hrm_conf_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_conf_show_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_conf_show_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="conf show"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_conf_edit_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_conf_edit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="conf edit"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_conf_path_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_conf_path_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="conf path"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_conf_cd_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_conf_cd_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="conf cd"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_logs_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_logs_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    core)
      action="core"
      shift
      hrm_logs_core_parse_requirements "$@"
      shift $#
      ;;

    service)
      action="service"
      shift
      hrm_logs_service_parse_requirements "$@"
      shift $#
      ;;

    cd)
      action="cd"
      shift
      hrm_logs_cd_parse_requirements "$@"
      shift $#
      ;;

    purge)
      action="purge"
      shift
      hrm_logs_purge_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      hrm_logs_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_logs_core_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_logs_core_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="logs core"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_logs_service_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_logs_service_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="logs service"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_logs_cd_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_logs_cd_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="logs cd"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_logs_purge_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_logs_purge_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="logs purge"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_status_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_status_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="status"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_stop_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
hrm_restart_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        hrm_restart_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="restart"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "conf") hrm_conf_command ;;
    "conf show") hrm_conf_show_command ;;
    "conf edit") hrm_conf_edit_command ;;
    "conf path") hrm_conf_path_command ;;
    "conf cd") hrm_conf_cd_command ;;
    "logs") hrm_logs_command ;;
    "logs core") hrm_logs_core_command ;;
    "logs service") hrm_logs_service_command ;;
    "logs cd") hrm_logs_cd_command ;;
    "logs purge") hrm_logs_purge_command ;;
    "status") hrm_status_command ;;
    "stop") hrm_stop_command ;;
    "restart") hrm_restart_command ;;
  esac
}

initialize
run "$@"
